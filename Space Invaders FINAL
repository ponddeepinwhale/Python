import pygame
import random
from pygame import mixer
pygame.init()
pygame.display.set_caption("Space Invaders")
screen = pygame.display.set_mode((800, 800))
clock = pygame.time.Clock()
my_font = pygame.font.SysFont('Comic Sans MS', 30)
text_surface = my_font.render('LIVES:', False, (255, 0, 0))
mixer.init()

mixer.music.load("EBLTA.mp3")

mixer.music.set_volume(0.7)

mixer.music.play()


lives = 3#sets number of lives to 3, can take 3 hits till gameover
xpos = 450#Position setting variables
ypos = 770
xpos2 = 400
ypos2 = 770
xpos3 = 450
ypos3 = 730
xpos4 = 440
ypos4 = 730
moveLeft = False
moveRight = False
Shoot = False
timer = 0;
#missile class
class Missile:
    def __init__(self, xpos, ypos, isAlive):
        self.xpos = -10
        self.ypos = -10
        self.isAlive = False
    def move(self, xpos, ypos):
        if self.isAlive == True:
          self.ypos+=5
        if self.ypos < 0:
          self.isAlive = False
          self.xpos = xpos
          self.ypos = ypos
   
    def draw(self):
        if self.isAlive:
            pygame.draw.rect(screen, (250, 250, 250), (self.xpos, self.ypos, 30, 30))
class Wall:
    def __init__(self, xpos, ypos):
        self.xpos = xpos
        self.ypos = ypos
        self.numHits = 0
       
    def draw(self):
        if self.numHits == 0:
            pygame.draw.rect(screen, (250, 250, 250), (self.xpos, self.ypos, 30, 30))
        if self.numHits == 1:
            pygame.draw.rect(screen, (150, 150, 10), (self.xpos, self.ypos, 30, 30))
        if self.numHits == 2:
            pygame.draw.rect(screen, (50, 50, 0), (self.xpos, self.ypos, 30, 30))
    def collide(self, BulletX, BulletY):
      if self.numHits < 3:
          if BulletX > self.xpos and BulletX < self.xpos + 20 and BulletY < self.ypos + 20 and BulletY > self.ypos:
            #print("hit")
            self.numHits +=1
            return False
      return True


#class player bullet--------------------------------------------------------------------------
class Bullet:
  def __init__(self, xpos, ypos):
    self.xpos = xpos
    self.ypos = ypos
    self.isAlive = False

  def move (self, xpos, ypos):
   # print("move function running")
    if self.isAlive == True:
      #print("moving up! position is", self.ypos)
      self.ypos-=5
      #print("moving up! position is", self.ypos)
      
    if self.ypos < 0: #check if you've hit the top of the screen
      self.isAlive = False
      self.xpos = xpos
      self.ypos = ypos
      #print("resetting position!")

  def draw(self):
    if self.isAlive:
        pygame.draw.rect(screen, (250, 250, 250), (self.xpos, self.ypos, 3, 20))
        #print("drawing bullet at", self.xpos, self.ypos)
       

bullet = Bullet(xpos +28, ypos)

#------------------------------------------------------------------------------------------
#class alien
class Alien:
  def __init__(self, xpos, ypos):
    self.xpos = xpos
    self.ypos = ypos
    self.isAlive = True
    self.direction = 1
    
  def move(self, time):
    if time % 1000 == 0:
      self.ypos += 100
      self.direction *=-1
      return 0
    if time % 100 == 0:
      self.xpos+=50*self.direction
    return time

  def collide(self, BulletX, BulletY):
      if self.isAlive == True:
          if BulletX > self.xpos and BulletX < self.xpos + 20 and BulletY < self.ypos + 20 and BulletY > self.ypos:
            #print("hit")
            self.isAlive = False
            bullet.isAlive = False
            return False
      return True
   
   #drawing set up of aliens (size, etc)
  def draw(self):
      if self.isAlive==True:
            pygame.draw.rect(screen, (250, 250, 250), (self.xpos, self.ypos, 20, 20))


#alien list
armada = []
for i in range(4):
  for j in range(9):
    armada.append(Alien(j*30+50, i*50+50))
#walls list   
walls = []
for k in range(4):
    for i in range(2):
        for j in range (3):
            walls.append(Wall(j*30+200*k+50, i*30+600))
            
#missile list            
missiles = []
for b in range(100):
    missiles.append(Missile(10, 20, 30))
   
#GAME LOOP ################################################################################################################
while lives > 0:#--------------------------------------------
    clock.tick(60)
    timer += 1
    for f in range(len(missiles)):
        missiles[f].move(xpos, ypos)#call move
#input section------------------------------------------------------
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            gameover = True

    if event.type == pygame.KEYDOWN:
        if event.key == pygame.K_LEFT:
            moveLeft = True#press left key to move left
        if event.key == pygame.K_RIGHT:
            moveRight = True#press right key to move right
        if event.key == pygame.K_UP:
            Shoot = True#press up to shoot
            #print("up pressed!")

    elif event.type == pygame.KEYUP:
        if event.key == pygame.K_LEFT:
            moveLeft = False#if not pressed, set to false, so not moving
        if event.key == pygame.K_RIGHT:
            moveRight = False
        if event.key == pygame.K_UP:
            Shoot = False#if not pressed, set to false, so not shooting
   
 

#physics section-----------------------------------------------------
    if moveLeft == True:
      vx =- 3
    else:
      vx = 0

    xpos += vx#player parts
    xpos2 += vx
    xpos3 += vx
    xpos4 += vx
   
    if moveRight == True:
        vx =+3
    else:
        vx = 0
    xpos += vx
    xpos2 += vx
    xpos3 += vx
    xpos4 += vx
   
   #move the aliens
    for i in range (len(armada)):
        timer = armada[i].move(timer)
        
    #move alien missiles
    for b in range (len(missiles)):
        missiles[b].move

    #move the player bullets
    if Shoot == True:
      bullet.isAlive = True
      #print("bullet is alive!")

    if bullet.isAlive == True: #if bullet is alive
        bullet.move(xpos+28, ypos)
        #print("bullet is moving")
    
    #otherwise set the PLAYER BULLET to player position
    else:
            bullet.xpos = xpos +28
            bullet.ypos = ypos
    #while bullet is alive
    if bullet.isAlive == True:
        for i in range(len(armada)):
            armada[i].collide(bullet.xpos, bullet.ypos)#check for collision with aliens
            if bullet.isAlive == False:#if collide set to false - KILL BULLET
                #print("bullet?")
                break
                         
        #while bullet is alive   
    if bullet.isAlive == True:
        for i in range (len(walls)):
            bullet.isAlive = walls[i].collide(bullet.xpos, bullet.ypos)#check for collision with walls
            if bullet.isAlive == False:#if collide, set to false, KILL BULLET
                break

            
            
    #checking for collision between WALLS and ALIEN MISSILES
    for i in range(len(walls)):
        for j in range(len(missiles)):
            if missiles[j].isAlive == True:
                if walls[i].collide(missiles[j].xpos, missiles[j].ypos) == False:
                    missiles[j].isAlive = False
                    break
    

  
            
    chance = random.randrange(100)
    if chance < 2:
        pick = random.randrange(len(armada))
        if armada[pick].isAlive == True:
            for i in range(len(missiles)):
                if missiles[i].isAlive == False:
                    missiles[i].isAlive = True
                    missiles[i].xpos = armada[pick].xpos + 5
                    missiles[i].ypos = armada[pick].ypos
                    break
    #check for player collision with alien missiles
    for i in range (len(missiles)):
        if missiles[i].isAlive:
            if missiles[i].xpos > xpos:
                if missiles[i].xpos < xpos + 40:
                    if missiles[i].ypos < ypos + 40:
                        if missiles[i].ypos > ypos:
                            #print("Player Hit")
                            lives -= 1 #if collide, take one life from player
                            missiles[i].xpos = 900
                            missiles[i].ypos  = 700

    
    #render  section----------------------------------------------------------------------------------------
    screen.fill((0, 0, 0))
    #draw bullet
    bullet.draw()
    
    #draw aliens
    for i in range (len(armada)):
      armada[i].draw()
    
    #draw walls
    for j in range (len(walls)):
        walls[j].draw()
    
    #draw alien missiles
    for b in range (len(missiles)):
        missiles[b].draw()
        
    screen.blit(text_surface, (0,0))
    if lives == 3:
        pygame.draw.rect(screen, (250, 250, 250), (110, 10, 50, 20))
    if lives >= 2:
        pygame.draw.rect(screen, (250, 250, 250), (190, 10, 50, 20))
    if lives >= 1:
        pygame.draw.rect(screen, (250, 250, 250), (270, 10, 50, 20))
            
    #draw player    
    pygame.draw.rect(screen, (250, 250, 250), (xpos, ypos, 60, 20))
    pygame.draw.rect(screen, (250, 250, 250), (xpos2, ypos2, 60, 20))
    pygame.draw.rect(screen, (250, 250, 250), (xpos3, ypos3, 20, 40))
    pygame.draw.rect(screen, (250, 250, 250), (xpos4, ypos4, 20, 40))
    pygame.display.flip()
#end of game loopo#####################################################################################################
if lives == 0:
    print("Gameover")
